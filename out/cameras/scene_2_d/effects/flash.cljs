(ns phzr.cameras.scene-2-d.effects.flash
  (:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]
            [phzr.impl.extend :as ex]
            [cljsjs.phaser])
  (:refer-clojure :exclude [update]))

(defn ->Flash
  "  Parameters:
    * camera (Phaser.Cameras.Scene2D.Camera) - The camera this effect is acting upon."
  ([camera]
   (js/Phaser.Cameras.Scene2D.Effects.Flash. (clj->phaser camera))))

(defn destroy
  "Destroys this effect, releasing it from the Camera."
  ([flash]
   (phaser->clj
    (.destroy flash))))

(defn effect-complete
  "Called internally when the effect completes."
  ([flash]
   (phaser->clj
    (.effectComplete flash))))

(defn post-render-canvas
  "Called internally by the Canvas Renderer.

  Parameters:
    * flash (Phaser.Cameras.Scene2D.Effects.Flash) - Targeted instance for method
    * ctx (CanvasRenderingContext2D) - The Canvas context to render to.

  Returns:  boolean - `true` if the effect drew to the renderer, otherwise `false`."
  ([flash ctx]
   (phaser->clj
    (.postRenderCanvas flash
                       (clj->phaser ctx)))))

(defn post-render-webgl
  "Called internally by the WebGL Renderer.

  Parameters:
    * flash (Phaser.Cameras.Scene2D.Effects.Flash) - Targeted instance for method
    * pipeline (Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline) - The WebGL Pipeline to render to.
    * get-tint-function (function) - A function that will return the gl safe tint colors.

  Returns:  boolean - `true` if the effect drew to the renderer, otherwise `false`."
  ([flash pipeline get-tint-function]
   (phaser->clj
    (.postRenderWebGL flash
                      (clj->phaser pipeline)
                      (clj->phaser get-tint-function)))))

(defn reset
  "Resets this camera effect.
  If it was previously running, it stops instantly without calling its onComplete callback or emitting an event."
  ([flash]
   (phaser->clj
    (.reset flash))))

(defn start
  "Flashes the Camera to or from the given color over the duration specified.

  Parameters:
    * flash (Phaser.Cameras.Scene2D.Effects.Flash) - Targeted instance for method
    * duration (integer) {optional} - The duration of the effect in milliseconds.
    * red (integer) {optional} - The amount to fade the red channel towards. A value between 0 and 255.
    * green (integer) {optional} - The amount to fade the green channel towards. A value between 0 and 255.
    * blue (integer) {optional} - The amount to fade the blue channel towards. A value between 0 and 255.
    * force (boolean) {optional} - Force the effect to start immediately, even if already running.
    * callback (Phaser.Types.Cameras.Scene2D.CameraFlashCallback) {optional} - This callback will be invoked every frame for the duration of the effect.
It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.
    * context (any) {optional} - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.

  Returns:  Phaser.Cameras.Scene2D.Camera - The Camera on which the effect was started."
  ([flash]
   (phaser->clj
    (.start flash)))
  ([flash duration]
   (phaser->clj
    (.start flash
            (clj->phaser duration))))
  ([flash duration red]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red))))
  ([flash duration red green]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red)
            (clj->phaser green))))
  ([flash duration red green blue]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red)
            (clj->phaser green)
            (clj->phaser blue))))
  ([flash duration red green blue force]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red)
            (clj->phaser green)
            (clj->phaser blue)
            (clj->phaser force))))
  ([flash duration red green blue force callback]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red)
            (clj->phaser green)
            (clj->phaser blue)
            (clj->phaser force)
            (clj->phaser callback))))
  ([flash duration red green blue force callback context]
   (phaser->clj
    (.start flash
            (clj->phaser duration)
            (clj->phaser red)
            (clj->phaser green)
            (clj->phaser blue)
            (clj->phaser force)
            (clj->phaser callback)
            (clj->phaser context)))))

(defn update
  "The main update loop for this effect. Called automatically by the Camera.

  Parameters:
    * flash (Phaser.Cameras.Scene2D.Effects.Flash) - Targeted instance for method
    * time (integer) - The current timestamp as generated by the Request Animation Frame or SetTimeout.
    * delta (number) - The delta time, in ms, elapsed since the last frame."
  ([flash time delta]
   (phaser->clj
    (.update flash
             (clj->phaser time)
             (clj->phaser delta)))))