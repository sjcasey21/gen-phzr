(ns phzr.cameras.scene-2-d.effects.pan
  (:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]
            [phzr.impl.extend :as ex]
            [cljsjs.phaser])
  (:refer-clojure :exclude [update]))

(defn ->Pan
  "  Parameters:
    * camera (Phaser.Cameras.Scene2D.Camera) - The camera this effect is acting upon."
  ([camera]
   (js/Phaser.Cameras.Scene2D.Effects.Pan. (clj->phaser camera))))

(defn destroy
  "Destroys this effect, releasing it from the Camera."
  ([pan]
   (phaser->clj
    (.destroy pan))))

(defn effect-complete
  "Called internally when the effect completes."
  ([pan]
   (phaser->clj
    (.effectComplete pan))))

(defn reset
  "Resets this camera effect.
  If it was previously running, it stops instantly without calling its onComplete callback or emitting an event."
  ([pan]
   (phaser->clj
    (.reset pan))))

(defn start
  "This effect will scroll the Camera so that the center of its viewport finishes at the given destination,
  over the duration and with the ease specified.

  Parameters:
    * pan (Phaser.Cameras.Scene2D.Effects.Pan) - Targeted instance for method
    * x (number) - The destination x coordinate to scroll the center of the Camera viewport to.
    * y (number) - The destination y coordinate to scroll the center of the Camera viewport to.
    * duration (integer) {optional} - The duration of the effect in milliseconds.
    * ease (string | function) {optional} - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.
    * force (boolean) {optional} - Force the pan effect to start immediately, even if already running.
    * callback (Phaser.Types.Cameras.Scene2D.CameraPanCallback) {optional} - This callback will be invoked every frame for the duration of the effect.
It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,
the current camera scroll x coordinate and the current camera scroll y coordinate.
    * context (any) {optional} - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.

  Returns:  Phaser.Cameras.Scene2D.Camera - The Camera on which the effect was started."
  ([pan x y]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y))))
  ([pan x y duration]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y)
            (clj->phaser duration))))
  ([pan x y duration ease]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y)
            (clj->phaser duration)
            (clj->phaser ease))))
  ([pan x y duration ease force]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y)
            (clj->phaser duration)
            (clj->phaser ease)
            (clj->phaser force))))
  ([pan x y duration ease force callback]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y)
            (clj->phaser duration)
            (clj->phaser ease)
            (clj->phaser force)
            (clj->phaser callback))))
  ([pan x y duration ease force callback context]
   (phaser->clj
    (.start pan
            (clj->phaser x)
            (clj->phaser y)
            (clj->phaser duration)
            (clj->phaser ease)
            (clj->phaser force)
            (clj->phaser callback)
            (clj->phaser context)))))

(defn update
  "The main update loop for this effect. Called automatically by the Camera.

  Parameters:
    * pan (Phaser.Cameras.Scene2D.Effects.Pan) - Targeted instance for method
    * time (integer) - The current timestamp as generated by the Request Animation Frame or SetTimeout.
    * delta (number) - The delta time, in ms, elapsed since the last frame."
  ([pan time delta]
   (phaser->clj
    (.update pan
             (clj->phaser time)
             (clj->phaser delta)))))